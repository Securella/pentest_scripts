import sys # CLI input
import json
import csv
from collections import defaultdict
# subclass of dict to aggregate data by keys,
# returns a default value when a key does not exist in the dictionary.


def load_data(file_path):
    # take args --> path to jso file
    # return --> dictionary or None
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
            return data
    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except json.JSONDecodeError:
        print(f"Error decoding JSON data from file: {file_path}")
    except Exception as e:
        print(f"An error occurred while loading data from file {file_path}: {e}")
    return None


def aggregate_vulnerabilities(data_sources):
    # take args --> dictionary of data sources and their file paths
    # return --> dictionary of vulnerabilities
    vulnerabilities = defaultdict(list)

    for source, file_path in data_sources.items():
        data = load_data(file_path)
        if data:
            for item in data:
                vulnerabilities[item['id']].append({
                    'source': source,
                    'name': item['name'],
                    'severity': item['severity'],
                    'description': item['description']
                })

    return vulnerabilities


def generate_report(vulnerabilities, output_file):
    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = ['ID', 'Name', 'Severity', 'Description', 'Source']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for plugin_id, details in vulnerabilities.items():
            for detail in details:
                writer.writerow({
                    'ID': plugin_id,
                    'Name': detail['name'],
                    'Severity': detail['severity'],
                    'Description': detail['description'],
                    'Source': detail['source']
                })


def main():
    if len(sys.argv) < 2 or len(sys.argv) % 2 != 0:
        print("Usage: python report_generator.py <nessus_file> <openvas_file> <burp_file>")
        return

    data_sources = {
        'nessus': sys.argv[1],
        'openvas': sys.argv[2],
        'burp': sys.argv[3]
    }

    vulnerabilities = aggregate_vulnerabilities(data_sources)
    if vulnerabilities:
        output_file = 'vulnerability_report.csv'
        generate_report(vulnerabilities, output_file)
        print(f"Success! Vulnerability report generated: {output_file}")
    else:
        print("No vulnerability data found.")


if __name__ == "__main__":
    main()
