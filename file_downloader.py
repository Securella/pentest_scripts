# written with the help of Copilot so comments and code are well-structured
import requests
import os
import sys


def download_file(url, destination):
    try:
        # Send a GET request to the URL
        response = requests.get(url, stream=True)

        # Check if status code 200 is returned
        if response.status_code == 200:
            # Open a file in binary write mode
            with open(destination, 'wb') as file:
                total_size = int(response.headers.get('content-length', 0))
                downloaded_size = 0
                chunk_size = 1024  # 1 KB

                # Iterate over the response content in chunks and write to file
                for chunk in response.iter_content(chunk_size=chunk_size):
                    file.write(chunk)
                    downloaded_size += len(chunk)

                    # Calculate and display download progress if total_size is not 0
                    if total_size != 0:
                        progress = (downloaded_size / total_size) * 100
                        print(f"Downloaded: {downloaded_size}/{total_size} bytes ({progress:.2f}%)\r", end='')
                    else:
                        print(f"Downloaded: {downloaded_size} bytes\r", end='')
                print("\nDownload complete!")
        else:
            print(f"Failed to download file: {response.status_code}")
    except Exception as e:
        print(f"An error occurred during download: {e}")


def main():
    # Check if URL is provided as command-line argument
    if len(sys.argv) != 2:
        print("Usage: python file_downloader.py <url> \n OR python3 file_downloader.py <url>")
        sys.exit(1)

    url = sys.argv[1]
    destination = os.path.basename(url)

    # Check if the file already exists
    if os.path.exists(destination):
        print("File already exists! No need to download again.")
    else:
        download_file(url, destination)


if __name__ == "__main__":
    main()
