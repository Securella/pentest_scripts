# Modified base from tryhackme.com
# source: https://tryhackme.com/room/pythonforcybersecurity
# + CodingNinja Blog 
# source: https://codingninjablogs.tech/tryhackme-python-for-pentesters-47b7ce525b90
# + https://thepythoncode.com/article/building-network-scanner-using-scapy?utm_content=cmp-true

import sys
import netifaces
from scapy.all import ARP, Ether, srp
import requests


def get_interface_ip(interface):
    try:
        addresses = netifaces.ifaddresses(interface)
        ip = addresses[netifaces.AF_INET][0]['addr']
        return ip
    except Exception as e:
        print(f"Error retrieving IP address for interface {interface}: {e}")
        return None


def get_mac_vendor(mac_address):
    try:
        mac_address = mac_address.upper()
        mac_address_prefix = mac_address[:8]  # Extract the first 3 octets (24 bits)
        response = requests.get(f"https://api.macvendors.com/{mac_address_prefix}")
        if response.status_code == 200:
            return response.text
        else:
            return "Unknown"
    except Exception as e:
        print(f"Error retrieving MAC vendor information: {e}")
        return "Unknown"


def network_scanning(interface, target_ip):
    try:
        arp = ARP(pdst=target_ip)
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = ether / arp
        result = srp(packet, timeout=3, iface=interface, verbose=0)[0]
        clients = []
        for sent, received in result:
            mac = received.hwsrc
            vendor = get_mac_vendor(mac)
            clients.append({'ip': received.psrc, 'mac': mac, 'vendor': vendor})
        print("Available devices in the network:")
        print("IP" + " "*18 + "MAC" + " "*19 + "Vendor")
        for client in clients:
            print("{:16}    {:18}    {}".format(client['ip'], client['mac'], client['vendor']))
    except Exception as e:
        print(f"Error during network scanning: {e}")


def main():
    if len(sys.argv) != 3:
        print("Usage: python3 network_scanning.py <interface> <target_ip>")
        sys.exit(1)
    interface = sys.argv[1]
    target_ip = sys.argv[2]
    interface_ip = get_interface_ip(interface)
    if interface_ip:
        print(f"Scanning using interface {interface} with IP address {interface_ip}")
        network_scanning(interface, target_ip)
    else:
        print(f"Failed to retrieve IP address for interface {interface}. Exiting...")


if __name__ == "__main__":
    main()
