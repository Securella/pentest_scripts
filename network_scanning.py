# Modified base from tryhackme.com
# source: https://tryhackme.com/room/pythonforcybersecurity
# + CodingNinja Blog 
# source: https://codingninjablogs.tech/tryhackme-python-for-pentesters-47b7ce525b90
# + https://thepythoncode.com/article/building-network-scanner-using-scapy?utm_content=cmp-true

import sys
import netifaces
from scapy.all import ARP, Ether, srp


def get_interface_ip(interface):
    try:
        addresses = netifaces.ifaddresses(interface)
        ip = addresses[netifaces.AF_INET][0]['addr']
        return ip
    except Exception as e:
        print(f"Error retrieving IP address for interface {interface}: {e}")
        return None


def network_scanning(interface, target_ip):
    try:
        # create ARP packet
        arp = ARP(pdst=target_ip)

        # create the Ether broadcast packet
        # ff:ff:ff:ff:ff:ff MAC address indicates broadcasting
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")

        # stack them
        packet = ether / arp

        # perform the network scan
        result = srp(packet, timeout=3, iface=interface, verbose=0)[0]

        # a list of clients, we will fill this in the upcoming loop
        clients = []

        for sent, received in result:
            # for each response, append ip and mac address to `clients` list
            clients.append({'ip': received.psrc, 'mac': received.hwsrc})

        # print clients
        print("Available devices in the network:")
        print("IP" + " "*18 + "MAC")
        for client in clients:
            print("{:16}    {}".format(client['ip'], client['mac']))
    except Exception as e:
        print(f"Error during network scanning: {e}")


def main():
    if len(sys.argv) != 3:
        print("Usage: python3 network_scanning_with_scapy.py <interface> <target_ip>")
        sys.exit(1)

    interface = sys.argv[1]
    target_ip = sys.argv[2]

    interface_ip = get_interface_ip(interface)
    if interface_ip:
        print(f"Scanning using interface {interface} with IP address {interface_ip}")
        network_scanning(interface, target_ip)
    else:
        print(f"Failed to retrieve IP address for interface {interface}. Exiting...")


if __name__ == "__main__":
    main()
