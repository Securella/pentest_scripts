import os
import sys
import requests
import concurrent.futures  # Add this import statement


def enumerate_directory(directory_url):
    try:
        # requests session object to apply max_redirects globally
        with requests.Session() as session:
            session.max_redirects = 10
            response = session.get(directory_url, allow_redirects=True)
            if response.status_code == 200:
                return directory_url
    except requests.exceptions.TooManyRedirects:
        print(f"Too many redirects for {directory_url}")
    except requests.exceptions.RequestException as e:
        print(f"Error accessing {directory_url}: {e}")


def main():
    if len(sys.argv) != 3:
        print("Usage: python3 directory_enumeration.py <base_url> <path_to_wordlist>")
        return

    # Base URL for the target website
    base_url = sys.argv[1]

    # check that URL includes http:// or https://
    if not base_url.startswith("http://") and not base_url.startswith("https://"):
        print("Error: Base URL must include the scheme (http:// or https://)")
        return

    # path to wordlist file
    wordlist_file = sys.argv[2]

    # Check wordlist exists
    if not os.path.isfile(wordlist_file):
        print("Error: Wordlist file not found.")
        return

    with open(wordlist_file) as file:
        directory_list = file.read().splitlines()

    # Construct directory URLs
    directory_urls = [f"{base_url}/{directory}/" for directory in directory_list]

    # directory enumeration using threading
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        results = executor.map(enumerate_directory, directory_urls)

    # Print valid directories or that none was found
    valid_directories = [result for result in results if result is not None]
    if valid_directories:
        for directory in valid_directories:
            print("Valid directory:", directory)
    else:
        print("Sorry, no valid directories found :(")


if __name__ == "__main__":
    main()

